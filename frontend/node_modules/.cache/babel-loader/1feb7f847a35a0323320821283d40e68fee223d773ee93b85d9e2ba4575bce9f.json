{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\new_folder1\\\\as\\\\frontend\\\\src\\\\components\\\\GoogleLoginButton.js\",\n  _s = $RefreshSig$();\n// src/components/GoogleLoginButton.js\n\nimport React, { useState, useContext } from 'react';\nimport { GoogleLogin } from '@react-oauth/google';\nimport { AuthContext } from '../contexts/AuthContext';\nimport { googleAuth } from '../api/authApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GoogleLoginButton = () => {\n  _s();\n  const [errorMessage, setErrorMessage] = useState('');\n  const {\n    saveTokens\n  } = useContext(AuthContext);\n  const handleSuccess = async credentialResponse => {\n    try {\n      // 'credential' is the Google ID token\n      const {\n        credential\n      } = credentialResponse;\n      // We send it to our backend to exchange for our JWT\n      const data = await googleAuth(credential);\n      // data should contain { access, refresh }\n      saveTokens(data.access, data.refresh);\n    } catch (error) {\n      if (error.response && error.response.data) {\n        setErrorMessage(error.response.data.error || 'Google login failed.');\n      } else {\n        setErrorMessage('Google login failed. Try again later.');\n      }\n    }\n  };\n  const handleError = () => {\n    setErrorMessage('Google login was not successful. Please try again.');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(GoogleLogin, {\n      onSuccess: handleSuccess,\n      onError: handleError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(GoogleLoginButton, \"fymGvBXM/uE/GyGnWTFSh7kUjRE=\");\n_c = GoogleLoginButton;\nexport default GoogleLoginButton;\nvar _c;\n$RefreshReg$(_c, \"GoogleLoginButton\");","map":{"version":3,"names":["React","useState","useContext","GoogleLogin","AuthContext","googleAuth","jsxDEV","_jsxDEV","GoogleLoginButton","_s","errorMessage","setErrorMessage","saveTokens","handleSuccess","credentialResponse","credential","data","access","refresh","error","response","handleError","children","onSuccess","onError","fileName","_jsxFileName","lineNumber","columnNumber","style","color","_c","$RefreshReg$"],"sources":["D:/Projects/new_folder1/as/frontend/src/components/GoogleLoginButton.js"],"sourcesContent":["// src/components/GoogleLoginButton.js\r\n\r\nimport React, { useState, useContext } from 'react';\r\nimport { GoogleLogin } from '@react-oauth/google';\r\nimport { AuthContext } from '../contexts/AuthContext';\r\nimport { googleAuth } from '../api/authApi';\r\n\r\nconst GoogleLoginButton = () => {\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n  const { saveTokens } = useContext(AuthContext);\r\n\r\n  const handleSuccess = async (credentialResponse) => {\r\n    try {\r\n      // 'credential' is the Google ID token\r\n      const { credential } = credentialResponse; \r\n      // We send it to our backend to exchange for our JWT\r\n      const data = await googleAuth(credential); \r\n      // data should contain { access, refresh }\r\n      saveTokens(data.access, data.refresh);\r\n    } catch (error) {\r\n      if (error.response && error.response.data) {\r\n        setErrorMessage(error.response.data.error || 'Google login failed.');\r\n      } else {\r\n        setErrorMessage('Google login failed. Try again later.');\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleError = () => {\r\n    setErrorMessage('Google login was not successful. Please try again.');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <GoogleLogin onSuccess={handleSuccess} onError={handleError} />\r\n      {errorMessage && <p style={{ color: 'red' }}>{errorMessage}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GoogleLoginButton;\r\n"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;AACnD,SAASC,WAAW,QAAQ,qBAAqB;AACjD,SAASC,WAAW,QAAQ,yBAAyB;AACrD,SAASC,UAAU,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM;IAAEW;EAAW,CAAC,GAAGV,UAAU,CAACE,WAAW,CAAC;EAE9C,MAAMS,aAAa,GAAG,MAAOC,kBAAkB,IAAK;IAClD,IAAI;MACF;MACA,MAAM;QAAEC;MAAW,CAAC,GAAGD,kBAAkB;MACzC;MACA,MAAME,IAAI,GAAG,MAAMX,UAAU,CAACU,UAAU,CAAC;MACzC;MACAH,UAAU,CAACI,IAAI,CAACC,MAAM,EAAED,IAAI,CAACE,OAAO,CAAC;IACvC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,IAAIA,KAAK,CAACC,QAAQ,IAAID,KAAK,CAACC,QAAQ,CAACJ,IAAI,EAAE;QACzCL,eAAe,CAACQ,KAAK,CAACC,QAAQ,CAACJ,IAAI,CAACG,KAAK,IAAI,sBAAsB,CAAC;MACtE,CAAC,MAAM;QACLR,eAAe,CAAC,uCAAuC,CAAC;MAC1D;IACF;EACF,CAAC;EAED,MAAMU,WAAW,GAAGA,CAAA,KAAM;IACxBV,eAAe,CAAC,oDAAoD,CAAC;EACvE,CAAC;EAED,oBACEJ,OAAA;IAAAe,QAAA,gBACEf,OAAA,CAACJ,WAAW;MAACoB,SAAS,EAAEV,aAAc;MAACW,OAAO,EAAEH;IAAY;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAC9DlB,YAAY,iBAAIH,OAAA;MAAGsB,KAAK,EAAE;QAAEC,KAAK,EAAE;MAAM,CAAE;MAAAR,QAAA,EAAEZ;IAAY;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5D,CAAC;AAEV,CAAC;AAACnB,EAAA,CA/BID,iBAAiB;AAAAuB,EAAA,GAAjBvB,iBAAiB;AAiCvB,eAAeA,iBAAiB;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}