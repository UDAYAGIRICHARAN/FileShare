{"ast":null,"code":"// src/api/authApi.js\nimport axiosInstance from './axiosInstance';\n\n// REGISTER\nexport const registerUser = async userData => {\n  // userData = { username, password, email, role? }\n  const response = await axiosInstance.post('/api/register/', userData);\n  return response.data; // { message: \"...\", or error }\n};\n\n// LOGIN\nexport const loginUser = async credentials => {\n  // credentials = { username, password }\n  const response = await axiosInstance.post('/api/login/', credentials);\n  return response.data; // { access, refresh } on success\n};\n\n// LOGOUT\nexport const logoutUser = async refreshToken => {\n  // refreshToken = stored refresh token in client\n  const response = await axiosInstance.post('/api/logout/', {\n    refresh: refreshToken\n  });\n  return response.data; // { message: \"Logout successful\" }\n};\n\n// GOOGLE OAUTH EXCHANGE\n// This call sends the Google ID token (the 'credential') to your Django backend\nexport const googleAuth = async googleIdToken => {\n  const response = await axiosInstance.post('/api/google-login/', {\n    token: googleIdToken\n  });\n  return response.data; // { access, refresh }\n};\n\n// VERIFY EMAIL (optional, if you want to handle it in React)\nexport const verifyEmail = async token => {\n  const response = await axiosInstance.get(`/api/verify-email/?token=${token}`);\n  return response.data; // { message: \"...\", or error }\n};","map":{"version":3,"names":["axiosInstance","registerUser","userData","response","post","data","loginUser","credentials","logoutUser","refreshToken","refresh","googleAuth","googleIdToken","token","verifyEmail","get"],"sources":["D:/Projects/new_folder1/as/frontend/src/api/authApi.js"],"sourcesContent":["// src/api/authApi.js\r\nimport axiosInstance from './axiosInstance';\r\n\r\n// REGISTER\r\nexport const registerUser = async (userData) => {\r\n  // userData = { username, password, email, role? }\r\n  const response = await axiosInstance.post('/api/register/', userData);\r\n  return response.data; // { message: \"...\", or error }\r\n};\r\n\r\n// LOGIN\r\nexport const loginUser = async (credentials) => {\r\n  // credentials = { username, password }\r\n  const response = await axiosInstance.post('/api/login/', credentials);\r\n  return response.data; // { access, refresh } on success\r\n};\r\n\r\n// LOGOUT\r\nexport const logoutUser = async (refreshToken) => {\r\n  // refreshToken = stored refresh token in client\r\n  const response = await axiosInstance.post('/api/logout/', { refresh: refreshToken });\r\n  return response.data; // { message: \"Logout successful\" }\r\n};\r\n\r\n// GOOGLE OAUTH EXCHANGE\r\n// This call sends the Google ID token (the 'credential') to your Django backend\r\nexport const googleAuth = async (googleIdToken) => {\r\n  const response = await axiosInstance.post('/api/google-login/', { token: googleIdToken });\r\n  return response.data; // { access, refresh }\r\n};\r\n\r\n// VERIFY EMAIL (optional, if you want to handle it in React)\r\nexport const verifyEmail = async (token) => {\r\n  const response = await axiosInstance.get(`/api/verify-email/?token=${token}`);\r\n  return response.data; // { message: \"...\", or error }\r\n};\r\n"],"mappings":"AAAA;AACA,OAAOA,aAAa,MAAM,iBAAiB;;AAE3C;AACA,OAAO,MAAMC,YAAY,GAAG,MAAOC,QAAQ,IAAK;EAC9C;EACA,MAAMC,QAAQ,GAAG,MAAMH,aAAa,CAACI,IAAI,CAAC,gBAAgB,EAAEF,QAAQ,CAAC;EACrE,OAAOC,QAAQ,CAACE,IAAI,CAAC,CAAC;AACxB,CAAC;;AAED;AACA,OAAO,MAAMC,SAAS,GAAG,MAAOC,WAAW,IAAK;EAC9C;EACA,MAAMJ,QAAQ,GAAG,MAAMH,aAAa,CAACI,IAAI,CAAC,aAAa,EAAEG,WAAW,CAAC;EACrE,OAAOJ,QAAQ,CAACE,IAAI,CAAC,CAAC;AACxB,CAAC;;AAED;AACA,OAAO,MAAMG,UAAU,GAAG,MAAOC,YAAY,IAAK;EAChD;EACA,MAAMN,QAAQ,GAAG,MAAMH,aAAa,CAACI,IAAI,CAAC,cAAc,EAAE;IAAEM,OAAO,EAAED;EAAa,CAAC,CAAC;EACpF,OAAON,QAAQ,CAACE,IAAI,CAAC,CAAC;AACxB,CAAC;;AAED;AACA;AACA,OAAO,MAAMM,UAAU,GAAG,MAAOC,aAAa,IAAK;EACjD,MAAMT,QAAQ,GAAG,MAAMH,aAAa,CAACI,IAAI,CAAC,oBAAoB,EAAE;IAAES,KAAK,EAAED;EAAc,CAAC,CAAC;EACzF,OAAOT,QAAQ,CAACE,IAAI,CAAC,CAAC;AACxB,CAAC;;AAED;AACA,OAAO,MAAMS,WAAW,GAAG,MAAOD,KAAK,IAAK;EAC1C,MAAMV,QAAQ,GAAG,MAAMH,aAAa,CAACe,GAAG,CAAC,4BAA4BF,KAAK,EAAE,CAAC;EAC7E,OAAOV,QAAQ,CAACE,IAAI,CAAC,CAAC;AACxB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}