{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\new_folder1\\\\as\\\\frontend\\\\src\\\\components\\\\GoogleLoginButton.js\",\n  _s = $RefreshSig$();\nimport React, { useContext, useState } from 'react';\nimport { GoogleLogin } from '@react-oauth/google';\nimport { useNavigate } from 'react-router-dom'; // For programmatic navigation\nimport { googleAuth } from '../api/authApi';\nimport { AuthContext } from '../contexts/AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GoogleLoginButton = () => {\n  _s();\n  const [errorMessage, setErrorMessage] = useState('');\n  const {\n    saveTokens\n  } = useContext(AuthContext);\n  const navigate = useNavigate(); // Initialize the navigation hook\n\n  const handleSuccess = async credentialResponse => {\n    try {\n      const {\n        credential\n      } = credentialResponse;\n      const data = await googleAuth(credential);\n      // data should be { access, refresh }\n\n      // Save tokens (local storage or context)\n      saveTokens(data.access, data.refresh);\n\n      // Now redirect to a protected route, e.g. \"/dashboard\"\n      navigate('/dashboard');\n    } catch (error) {\n      if (error.response && error.response.data) {\n        setErrorMessage(error.response.data.error || 'Google login failed.');\n      } else {\n        setErrorMessage('Google login failed. Try again.');\n      }\n    }\n  };\n  const handleError = () => {\n    setErrorMessage('Google login was not successful. Please try again.');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginTop: '1rem'\n    },\n    children: [/*#__PURE__*/_jsxDEV(GoogleLogin, {\n      onSuccess: handleSuccess,\n      onError: handleError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 24\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(GoogleLoginButton, \"TxzNSqv+TIfHlhSdBvqAegaqGu0=\", false, function () {\n  return [useNavigate];\n});\n_c = GoogleLoginButton;\nexport default GoogleLoginButton;\nvar _c;\n$RefreshReg$(_c, \"GoogleLoginButton\");","map":{"version":3,"names":["React","useContext","useState","GoogleLogin","useNavigate","googleAuth","AuthContext","jsxDEV","_jsxDEV","GoogleLoginButton","_s","errorMessage","setErrorMessage","saveTokens","navigate","handleSuccess","credentialResponse","credential","data","access","refresh","error","response","handleError","style","marginTop","children","onSuccess","onError","fileName","_jsxFileName","lineNumber","columnNumber","color","_c","$RefreshReg$"],"sources":["D:/Projects/new_folder1/as/frontend/src/components/GoogleLoginButton.js"],"sourcesContent":["import React, { useContext, useState } from 'react';\r\nimport { GoogleLogin } from '@react-oauth/google';\r\nimport { useNavigate } from 'react-router-dom'; // For programmatic navigation\r\nimport { googleAuth } from '../api/authApi';\r\nimport { AuthContext } from '../contexts/AuthContext';\r\n\r\nconst GoogleLoginButton = () => {\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n  const { saveTokens } = useContext(AuthContext);\r\n  const navigate = useNavigate(); // Initialize the navigation hook\r\n\r\n  const handleSuccess = async (credentialResponse) => {\r\n    try {\r\n      const { credential } = credentialResponse;\r\n      const data = await googleAuth(credential);\r\n      // data should be { access, refresh }\r\n\r\n      // Save tokens (local storage or context)\r\n      saveTokens(data.access, data.refresh);\r\n\r\n      // Now redirect to a protected route, e.g. \"/dashboard\"\r\n      navigate('/dashboard');\r\n    } catch (error) {\r\n      if (error.response && error.response.data) {\r\n        setErrorMessage(error.response.data.error || 'Google login failed.');\r\n      } else {\r\n        setErrorMessage('Google login failed. Try again.');\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleError = () => {\r\n    setErrorMessage('Google login was not successful. Please try again.');\r\n  };\r\n\r\n  return (\r\n    <div style={{ marginTop: '1rem' }}>\r\n      <GoogleLogin onSuccess={handleSuccess} onError={handleError} />\r\n      {errorMessage && <p style={{ color: 'red' }}>{errorMessage}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GoogleLoginButton;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AACnD,SAASC,WAAW,QAAQ,qBAAqB;AACjD,SAASC,WAAW,QAAQ,kBAAkB,CAAC,CAAC;AAChD,SAASC,UAAU,QAAQ,gBAAgB;AAC3C,SAASC,WAAW,QAAQ,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtD,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM;IAAEW;EAAW,CAAC,GAAGZ,UAAU,CAACK,WAAW,CAAC;EAC9C,MAAMQ,QAAQ,GAAGV,WAAW,CAAC,CAAC,CAAC,CAAC;;EAEhC,MAAMW,aAAa,GAAG,MAAOC,kBAAkB,IAAK;IAClD,IAAI;MACF,MAAM;QAAEC;MAAW,CAAC,GAAGD,kBAAkB;MACzC,MAAME,IAAI,GAAG,MAAMb,UAAU,CAACY,UAAU,CAAC;MACzC;;MAEA;MACAJ,UAAU,CAACK,IAAI,CAACC,MAAM,EAAED,IAAI,CAACE,OAAO,CAAC;;MAErC;MACAN,QAAQ,CAAC,YAAY,CAAC;IACxB,CAAC,CAAC,OAAOO,KAAK,EAAE;MACd,IAAIA,KAAK,CAACC,QAAQ,IAAID,KAAK,CAACC,QAAQ,CAACJ,IAAI,EAAE;QACzCN,eAAe,CAACS,KAAK,CAACC,QAAQ,CAACJ,IAAI,CAACG,KAAK,IAAI,sBAAsB,CAAC;MACtE,CAAC,MAAM;QACLT,eAAe,CAAC,iCAAiC,CAAC;MACpD;IACF;EACF,CAAC;EAED,MAAMW,WAAW,GAAGA,CAAA,KAAM;IACxBX,eAAe,CAAC,oDAAoD,CAAC;EACvE,CAAC;EAED,oBACEJ,OAAA;IAAKgB,KAAK,EAAE;MAAEC,SAAS,EAAE;IAAO,CAAE;IAAAC,QAAA,gBAChClB,OAAA,CAACL,WAAW;MAACwB,SAAS,EAAEZ,aAAc;MAACa,OAAO,EAAEL;IAAY;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAC9DrB,YAAY,iBAAIH,OAAA;MAAGgB,KAAK,EAAE;QAAES,KAAK,EAAE;MAAM,CAAE;MAAAP,QAAA,EAAEf;IAAY;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5D,CAAC;AAEV,CAAC;AAACtB,EAAA,CAnCID,iBAAiB;EAAA,QAGJL,WAAW;AAAA;AAAA8B,EAAA,GAHxBzB,iBAAiB;AAqCvB,eAAeA,iBAAiB;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}